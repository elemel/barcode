    clo + main
    hcf

main:
.sum = 0
    ent + 1
    0, ldl + .sum; Initialize sum
.loop:
    stdin, siz, blt + .break; Break on EOF
    stdin, 0, clo + get_integer_line
    3, div, flr, 2, sub
    ldl + .sum, add, stl + .sum, top - 1
    bal + .loop
.break:
    ldl + .sum, stdout, clo + put_integer_line
    ret + 1

; [stream] -> [result]
get_integer_line: .stream = 0, .result = 1
    ent + 2, stl + .stream
    0, stl + .result; Initialize result
    1; Positive sign
    ldl + .stream, get; First character
    dup, "-", sub, bne + .loop; If sign character
    top - 1; Discard sign character
    -1, mul; Negative sign
    ldl + .stream, get; First character after sign
.loop:
    dup, "\n", sub, beq + .break; Break on newline
    "0", sub; Character to digit
    ldl + .result, 10, mul; Multiply result by base
    add, stl + .result; Add digit to result
    ldl + .stream, get; Next character
    bal + .loop
.break:
    top - 1; Discard newline
    ldl + .result, mul, stl + .result; Apply sign
    ldl + .result, ret + 2

; [stream, value] -> []
put_integer_line: .stream = 0, .value = 1
    ent + 2, stl + .stream, stl + .value
    1
    ldl + .value, bge + .loop_1
    "-", ldl + .stream, put
    ldl + .value, neg, stl + .value
.loop_1:
    10, mul
    dup, ldl + .value, sub, ble + .loop_1
.loop_2:
    10, div, flr
    dup, beq + .break
    dup, ldl + .value, swp, div, flr
    "0", add, ldl + .stream, put
    dup, ldl + .value, swp, mod, stl + .value
    bal + .loop_2
.break:
    "\n", ldl + .stream, put
    ret + 2
