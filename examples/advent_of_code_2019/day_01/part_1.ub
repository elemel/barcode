    cli + main
    hcf

main:
.sum = 0
    ent + 1, pop, pop
    0, stl + .sum; Initialize sum
.loop:
    stdin, siz, blt + .break; Break on EOF
    stdin, cli + get_integer_line
    fdi + 3, adi - 2
    ldl + .sum, add, stl + .sum
    bal + .loop
.break:
    ldl + .sum, stdout, cli + put_integer_line
    0, ret + 1

; [stream] -> [result]
get_integer_line:
.stream = 0, .result = 1
    ent + 2, stl + .stream
    0, stl + .result; Initialize result
    1; Positive sign
    ldl + .stream, get; First character
    dup, "-", sub, bne + .loop; If sign character
    pop; Discard sign character
    neg; Negative sign
    ldl + .stream, get; First character after sign
.loop:
    dup, "\n", sub, beq + .break; Break on newline
    "0", sub; Character to digit
    ldl + .result, mli + 10; Multiply result by base
    add, stl + .result; Add digit to result
    ldl + .stream, get; Next character
    bal + .loop
.break:
    pop; Discard newline
    ldl + .result, mul, stl + .result; Apply sign
    ldl + .result, ret + 2

; [value, stream] -> []
put_integer_line:
.stream = 0, .value = 1
    ent + 2, stl + .stream, stl + .value
    1
    ldl + .value, bge + .loop_1
    "-", ldl + .stream, put
    ldl + .value, neg, stl + .value
.loop_1:
    mli + 10
    dup, ldl + .value, sub, ble + .loop_1
.loop_2:
    fdi + 10
    dup, beq + .break
    dup, ldl + .value, swp, div, fdi + 1
    "0", add, ldl + .stream, put
    dup, ldl + .value, swp, mod, stl + .value
    bal + .loop_2
.break:
    "\n", ldl + .stream, put
    ret + 2
